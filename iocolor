/*
 *           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
 *                   Version 2, December 2004
 *
 *           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
 *  TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
 *
 *  0. You just DO WHAT THE FUCK YOU WANT TO.
 *********************************************************************/

#ifndef _IOCOLOR_H
#define _IOCOLOR_H

#include <iostream>
#include <unistd.h>

namespace iocolor
{
	static
	bool
	is_tty (int fd)
	{
		return isatty(fd);
	}

	static
	bool
	is_tty (const std::ostream& s)
	{
		if (s.rdbuf() == std::cout.rdbuf()) {
			return is_tty(STDOUT_FILENO);
		}
		else if (s.rdbuf() == std::cerr.rdbuf()) {
			return is_tty(STDERR_FILENO);
		}
		else {
			return false;
		}
	}

	struct color_definition
	{
		short   foreground;
		short   background;
		uint8_t effects;
	};

	enum class color : short
	{
		black,
		red,
		green,
		yellow,
		blue,
		magenta,
		cyan,
		white,

		none  = -1,
		reset = -2
	};

	enum class effect : uint8_t
	{
		none = 0,

		bold      = 1, // 1
		underline = 2, // 4
		blink     = 4, // 5
		standout  = 8  // 7
	};

	inline constexpr
	effect
	operator | (enum effect a, enum effect b)
	{
		return static_cast<effect>(static_cast<uint8_t>(a) | static_cast<uint8_t>(b));
	}

	inline
	color_definition
	make_color (enum color fg, enum color bg = color::none, enum effect ef = effect::none)
	{
		return { static_cast<short>(fg),
		         static_cast<short>(bg),
		         static_cast<uint8_t>(ef) };
	}

	inline
	color_definition
	make_color (short fg, short bg = -1, uint8_t ef = 0)
	{
		return { fg, bg, ef };
	}

	inline
	color_definition
	foreground (enum color fg)
	{
		return make_color(fg);
	}

	inline
	color_definition
	foreground (short fg)
	{
		return make_color(fg);
	}

	inline
	color_definition
	background (enum color bg)
	{
		return make_color(color::none, bg);
	}

	inline
	color_definition
	background (short bg)
	{
		return make_color(-1, bg);
	}

	inline
	color_definition
	effects (enum effect ef)
	{
		return make_color(color::none, color::none, ef);
	}

	inline
	color_definition
	effects (uint8_t ef)
	{
		return make_color(-1, -1, ef);
	}
}

static
std::ostream&
operator << (std::ostream& o, iocolor::color_definition descriptor)
{
	if (!iocolor::is_tty(o)) {
		return o;
	}

	if (descriptor.effects != 0) {
		if (descriptor.effects & static_cast<uint8_t>(iocolor::effect::bold)) {
			o << "\033[1m";
		}

		if (descriptor.effects & static_cast<uint8_t>(iocolor::effect::underline)) {
			o << "\033[4m";
		}

		if (descriptor.effects & static_cast<uint8_t>(iocolor::effect::blink)) {
			o << "\033[5m";
		}

		if (descriptor.effects & static_cast<uint8_t>(iocolor::effect::standout)) {
			o << "\033[7m";
		}
	}

	if (descriptor.foreground != -1) {
		if (descriptor.foreground < 8) {
			o << "\033[" << descriptor.foreground + 30 << "m";
		}
		else {
			o << "\033[38;5;" << descriptor.foreground << "m";
		}
	}

	if (descriptor.background != -1) {
		if (descriptor.background < 8) {
			o << "\033[" << descriptor.background + 40 << "m";
		}
		else {
			o << "\033[48;5;" << descriptor.background << "m";
		}
	}

	return o;
}

static
std::ostream&
operator << (std::ostream& o, enum iocolor::color c)
{
	if (c == iocolor::color::reset) {
		o << "\033[0m";
	}
	else {
		o << iocolor::foreground(c);
	}

	return o;
}

static
std::ostream&
operator << (std::ostream& o, enum iocolor::effect ef)
{
	if (ef == iocolor::effect::none) {
		o << "\033[0m";
	}
	else {
		o << iocolor::effects(ef);
	}

	return o;
}

#endif
